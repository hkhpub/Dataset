rbind(x,y)
tmp2*tmp2
dim(tmp2)
> g=array(1:18,c(3,3,2))
> g
> g[1,1,2]
> g[1,,]
> g[,,2]
> z=1:24
> dim(z)=c(4,3,2)
> z
> zz=c(z)
> n=length(zz)
> zz2=rep(0,n)
> for(j in 1:n){ zz2[j]=zz[j]^2+1
+ print(zz2[j]) }
> fruits=c("apple","banana","orange","melon")
> for(f in fruits){
+ if(nchar(f)>5) print(f)
+ else print("tomato") }
> n=0; sumn=0
> while(sumn<50) { n=n+1; sumn=sumn+n }
> n;sumn
5) print(f)
g=array(1:18,c(3,3,2))
g
g[1,1,2]
g[1,,]
g[,,2]
z=1:24
dim(z)=c(4,3,2)
z
zz=c(z)
n=length(zz)
zz2=rep(0,n)
for(j in 1:n){ zz2[j]=zz[j]^2+1
print(zz2[j]) }
fruits=c("apple","banana","orange","melon")
for(f in fruits){
if(nchar(f)>5) print(f)
else print("tomato") }
n=0; sumn=0
while(sumn<50) { n=n+1; sumn=sumn+n }
n;sumn
z=1:24
dim(z)=(3,4,2)
dim(z)=c(4,3,2)
z
zz=c(z)
zz
n=length(zz)
n
zz2=rep(0,n)
zz2
state=c("Low","Low","High","Mid","Mid","High")
statef=factor(state)
statef
levels(statef)=c("H","L","M")
statef
as.numeric(statef)
statef2=factor(state,levels=c("Low","Mid","High"))
statef2
pre=c(54, 64, 75, 49, 52, 77, 94)
post=c(53, 60, 70, 49, 53, 70, 69)
diet=list(before=pre,after=post)
diet
diet$before
diet[1]
diet=list(pre,post)
diet
q()
edu=read.table("D:/workspace.R/edu.txt",header=T) #파일이저장된주소를지정
edu
summary(edu)
attributes(edu)
rownames(edu)
colnames(edu)
edu$X1970년
edu[,1]
edu[,2]
du[1,]
du[2,]
edu[edu$X1970년>25,]
subset(edu,X1970년>25)
edu=transform(edu,Ratio=X1990년/X1970년)
cat("example 6","\n","1970년=",edu$X1970년,"\n","1990년=",edu$X1990년,file="D:/workspace.R/test.txt")
write.table(edu,"D:/workspace.R/edu2.txt",sep=",",row.names=F)
edu=read.table("D:/workspace.R/edu.txt",header=T) #파일이저장된주소를지정
edu
summary(edu)
attributes(edu)
rownames(edu)
colnames(edu)
edu$X1970년
edu[,1]
edu[,2]
du[1,]
du[2,]
edu[edu$X1970년>25,]
subset(edu,X1970년>25)
edu=transform(edu,Ratio=X1990년/X1970년)
cat("example 6","\n","1970년=",edu$X1970년,"\n","1990년=",edu$X1990년,file="D:/workspace.R/test.txt")
write.table(edu,"D:/workspace.R/edu2.txt",sep=",",row.names=F)
edu=read.table("D:/workspace.R/edu.txt",header=T) #파일이저장된주소를지정
edu
summary(edu)
attributes(edu)
rownames(edu)
colnames(edu)
edu$X1970년
edu[,1]
edu[,2]
edu[1,]
edu[2,]
edu[edu$X1970년>25,]
subset(edu,X1970년>25)
edu=transform(edu,Ratio=X1990년/X1970년)
cat("example 6","\n","1970년=",edu$X1970년,"\n","1990년=",edu$X1990년,file="D:/workspace.R/test.txt")
write.table(edu,"D:/workspace.R/edu2.txt",sep=",",row.names=F)
edu=read.table("D:/workspace.R/edu.txt",header=T) #파일이저장된주소를지정
edu
summary(edu)
attributes(edu)
rownames(edu)
colnames(edu)
edu$X1970년
edu[,1]
edu[,2]
edu[1,]
edu[2,]
edu[edu$X1970년>25,]
subset(edu,X1970년>25)
edu=transform(edu,Ratio=X1990년/X1970년)
cat("example 6","\n","1970년=",edu$X1970년,"\n","1990년=",edu$X1990년,file="D:/workspace.R/test.txt")
write.table(edu,"D:/workspace.R/edu2.txt",sep=",",row.names=F)
edu
oddcount=function(x) {
k=0
for(n in x) {
if(n%%2==1) k=k+1
}
return(k)
}
func1=oddcount
oddcount(c(1,3,5))
attr1=c(8,12,3,8,9,11,9,8,4,1,14,2)
attr2=c(6,2,9,1,7,2,3,6,2,6,1,5)
attr3=c(16,22,19,61,37,22,31,26,42,34,26,51)
attr4=rep(c("A","B"),6)
testdata=data.frame(attr1,attr2,attr3,attr4)
testdata
lapply(testdata[,1:3],func1)
sapply(testdata[,1:3],func1)
tapply(testdata$attr1,testdata$attr4,func1)
apply(testdata[,1:3],1,func1)
apply(testdata[,1:3],2,func1)
testdata[,1:3]
func1(7)
testdata[,1]
func1(testdata[,1])
oddcount=function(x) {
k=0
for(n in x) {
if(n%%2==1) k=k+1
}
return(k)
}
func1=oddcount
oddcount(c(1,3,5))
attr1=c(8,12,3,8,9,11,9,8,4,1,14,2)
attr2=c(6,2,9,1,7,2,3,6,2,6,1,5)
attr3=c(16,22,19,61,37,22,31,26,42,34,26,51)
attr4=rep(c("A","B"),6)
testdata=data.frame(attr1,attr2,attr3,attr4)
testdata
lapply(testdata[,1:3],func1)
sapply(testdata[,1:3],func1)
tapply(testdata$attr1,testdata$attr4,func1)
apply(testdata[,1:3],1,func1)
apply(testdata[,1:3],2,func1)
install.packages("tree")
library("tree")
data(iris)
iris.tr=tree(Species~.,iris)
summary(iris.tr)
print(iris.tr)
plot(iris.tr)
text(iris.tr)
iris.ptr=prune.tree(iris.tr,best=4)
summary(iris.ptr)
print(iris.ptr)
plot(iris.ptr)
text(iris.ptr)
iris.ptr=prune.tree(iris.tr,best=5)
summary(iris.ptr)
iris.ptr=prune.tree(iris.tr,best=3)
summary(iris.ptr)
print(iris.ptr)
plot(iris.ptr)
text(iris.ptr)
plot(iris.tr)
text(iris.tr)
predict(iris.tr,iris)
predict(iris.tr,iris,type="class")
predict(iris.ptr,iris)
predict(iris.ptr,iris,type="class")
pred_cls=predict(iris.tr,iris,type="class")
calc_accu=function(target,pred){
k=0
l=length(target)
for(i in 1:l) k=k+(target[i]==pred[i])
return(k/l)
}
calc_accu(iris$Species,pred_cls)
iris$Species
install.packages("Naive Bayes")
install.packages("SVM")
carData=read.table("D:/workspace.R/car.data")
carData
carData=read.table("D:/workspace.R/car.data", header=TRUE)
carData
carData=read.table("D:/workspace.R/car.data", header=TRUE)
carData=read.cvs("D:/workspace.R/car.data", header=TRUE)
carData=read.xls("D:/workspace.R/car.data", header=TRUE)
carData=read.table("D:/workspace.R/car.data", header=TRUE, sep=",")
carData=read.table("D:/workspace.R/car.data", sep=",")
carData=read.table("D:/workspace.R/car.data", header=TRUE, sep=",", row.names=0)
carData=read.table("D:/workspace.R/car.data", header=TRUE, sep=",", row.names=1)
carData=read.table("D:/workspace.R/car.data", header=TRUE, sep=",", row.names=0)
carData=read.table("D:/workspace.R/car.data", header=TRUE, sep=",", row.names=0)
carData=read.table("D:/workspace.R/car.data", header=TRUE, sep=",", row.names=1)
carData=read.csv("D:/workspace.R/car.data", header=TRUE)
carData=read.csv("D:/workspace.R/car.data", header=TRUE)
carData=read.csv("D:/workspace.R/car.data")
carData=read.csv("D:/workspace.R/car.data")
carData=read.csv("D:/workspace.R/car.data", header=TRUE)
carData=read.csv("D:/workspace.R/car.data", header=TRUE, row.names=1)
carData=read.csv("D:/workspace.R/car.data", header=TRUE, col.names=c("setting","effort","change")buying,maint,doors,persons,lug_boot,safety)
carData=read.csv("D:/workspace.R/car.data", header=TRUE, row.names=1)
read.csv("D:/workspace.R/card.data", col.names=c("buying","maint","doors","persons","lug_boot","safety"))
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety"))
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety"))
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety"), row.names=1)
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety"))
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety"), row.names=NULL)
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety"), row.names=NULL)
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety"), row.names=NULL)
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety"), row.names=NULL)
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety"), row.names=NULL)
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety","category"), row.names=NULL)
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety","category"), row.names=NULL)
read.csv("D:/workspace.R/car.data", row.names=NULL)
read.csv("D:/workspace.R/car.data", row.names=NULL)
read.csv("D:/workspace.R/car.data", header=TRUE, row.names=NULL)
read.csv("D:/workspace.R/car.data", header=TRUE, row.names=NULL)
read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety","category"), row.names=NULL)
index <- sample(1:nrow(carData), 5)
index
carData[index,]
predict(iris.tr,iris)
data(iris)
m <- naiveBayes(Species ~ ., data = iris)
library(e1071)
library("e1071")
path()
path
search()
install.packages("e1071")
library("e1071")
m <- naiveBayes(Species ~ ., data = iris)
m
data(HouseVotes84, package="mlbench")
m <- naiveBayes(iris[,-5], iris[,5])
m
iris[,-5]
iris
iris[,5]
m
m <- naiveBayes(iris[,-7], iris[,7])
m <- naiveBayes(carData[,-7], carData[,7])
m <- naiveBayes(carData[,-6], carData[,6])
carData
carData=read.csv("D:/workspace.R/car.data", col.names=c("buying","maint","doors","persons","lug_boot","safety","category"), row.names=NULL)
carData
m <- naiveBayes(carData[,-6], carData[,6])
m <- naiveBayes(carData[,-7], carData[,7])
m
table(predict(m, carData), carData[,5])
predict(m, carData), carData[,5]
predict(m, carData)
predict(m, carData, type="class")
predict(m, carData, type="vector")
predict(m, carData, type="raw")
index <- sample(1:nrow(carData), 180)
index
carData.training=carData[index,]
carData.training
m <- naiveBayes(carData.training[,-7], carData.training[,7])
m
iris.tr=tree(Species~., iris)
summary(iris.tr)
pred_cls=predict(iris.tr, iris, type="class")
pred_cls
nrow(iris)
calc_accu
iris$Species
calc_accu(iris$Species, pred_cls)
ti <- sample(1:nrow[iris], 20)
ti <- sample(1:nrow(iris), 20)
ti
iris[ti,]
iris.training=iris[ti,]
iris.tr=tree(Species~.,iris)
summary(iris.tr)
pred_cls
calc_accu(iris$Species, pred_cls)
pred_cls=predict(iris.tr, iris, type="class")
calc_accu=function(target,pred){
k=0
l=length(target)
for(iin 1:l) k=k+(target[i]==pred[i])
return(k/l)
}
calc_accu=function(target,pred){
k=0
l=length(target)
for(iin 1:l) k=k+(target[i]==pred[i])
return(k/l)
}
calc_accu=function(target,pred){
k=0
l=length(target)
for(i in 1:l) k=k+(target[i]==pred[i])
return(k/l)
}
calc_accu(iris$Species, pred_cls)
pred_cls=predict(iris.tr, iris.training, type="class")
pred_cls
calc_accu(iris$Species, pred_cls)
testIndex <- sample(1:nrow(iris), 20)
testIndex
iris.test=iris[testIndex,]
calc_accu(iris.test, pred_cls)
calc_accu(iris.test$Species, pred_cls)
trainingIndex <- sample(1:nrow(iris), 100)
trainingIndex
iris.training=iris[trainingIndex,]
testIndex <- sample(1:nrow(iris), 100)
testIndex
iris.test=iris[testIndex,]
pred_cls=predict(iris.tr, iris.training, type="class")
calc_accu(iris.test$Species, pred_cls)
calc_accu=function(target,pred){
k=0
l=length(target)
for(i in 1:l) k=k+(target[i]==pred[i])
return(k/l)
}
calc_accu(iris.test$Species, pred_cls)
nrow(iris.test)
nrow(iris.training)
iris.tr=tree(Species~., iris.training)
calc_accu(iris.test$Species, pred_cls)
pred_cls=predict(iris.tr, iris.training, type="class")
calc_accu(iris.test$Species, pred_cls)
calc_accu=function(target,pred){
k=0
l=length(target)
for(i in 1:l) k=k+(target[i]==pred[i])
return(k/l)
}
calc_accu(iris.test$Species, pred_cls)
pred_cls
pred_cls=predict(iris.tr, iris, type="class")
calc_accu(iris$Species, pred_cls)
pred_cls=predict(iris.tr, iris.training, type="class")
calc_accu(iris.training$Species, pred_cls)
pred_cls=predict(iris.tr, iris.test, type="class")
calc_accu(iris.test$Species, pred_cls)
car.trainIndex <- sample(1:nrow(carData), 800)
car.trainIndex
car.trainData = carData[car.trainIndex,]
car.trainData
car.testIndex <- sample(1:nrow(carData), 800)
car.testIndex
car.testData = carData[car.testIndex,]
car.testData
car.naiveBayes(Species~., data=car.trainData)
car.naiveBayes = naiveBayes(Species~., data=car.trainData)
car.naiveBayes = naiveBayes(Species ~ ., data=car.trainData)
car.naiveBayes = naiveBayes(car.trainData$Species ~ ., data=car.trainData)\
car.naiveBayes = naiveBayes(car.trainData$Species ~ ., data=car.trainData)
car.naiveBayes = naiveBayes(car.trainData[,-7], car.trainData[,7])
car.naiveBayes
predict(car.naiveBayes, car.trainData)
pred_cls=predict(car.naiveBayes, car.trainData, type="class")
pred_cls
calc_accu=function(target,pred){
k=0
l=length(target)
for(i in 1:l) k=k+(target[i]==pred[i])
return(k/l)
}
calc_accu(car.testData$Species,pred_cls)
car.naiveBayes = naiveBayes(car.trainData[,-7], car.trainData[,7], na.action=na.pass)
pred_cls=predict(car.naiveBayes, car.trainData, type="class")
calc_accu(car.testData$Species,pred_cls)
car.testData
car.testData$Species
car.trainData$Species
iris$Species
calc_accu(car.testData[,7],pred_cls)
car.trainData$Species = car.testData[,7]
car.trainData$Species
car.trainData$Species = car.trainData[,7]
car.testData$Species = car.testData[,7]
calc_accu(car.testData[,7],pred_cls)
calc_accu(car.testData[,7],pred_cls)
calc_accu(car.trainData[,7],pred_cls)
calc_accu(car.trainData$Species,pred_cls)
calc_accu(car.testData$Species,pred_cls)
q()
car.trainDAta
car.trainData
q()
nrow(carData)
pred_cls=predict(car.naiveBayes, car.trainData[,-7], type="class")
car.trainData[,-7]
car.trainData
pred_cls=predict(car.naiveBayes, car.trainData[,-7], type="class")
car.naiveBayes
pred_cls=predict(car.naiveBayes, car.trainData, type="class")
predict
pred_cls=predict(car.naiveBayes, car.trainData[,-6], type="class")
car.trainData[,-6]
car.trainData[,-8]
car.trainData[,-7]
car.trainData[,-5]
car.trainData[,-4]
car.trainData[-7,]
car.naiveBayes = naiveBayes(car.trainData[,-7], car.trainData[,7])
library("e1071")
car.naiveBayes = naiveBayes(car.trainData$Species, car.trainData[,7])
car.trainData[,7]
car.trainData
car.trainData[,7]
car.trainData[,-7]
pred_cls=predict(car.naiveBayes, car.trainData[,-7], type="class")
calc_accu(car.trainData$Species,pred_cls)
calc_accu(car.testData$Species,pred_cls)
calc_accu(car.testData$Species,pred_cls)
calc_accu(car.testData$Species,pred_cls)
car.trainData[,1:6]
car.trainData[,1:7]
car.naiveBayes = naiveBayes(car.trainData$Species, car.trainData[,1:7])
car.trainData = carData[car.trainIndex,]
car.trainData
car.testData = carData[car.testIndex,]
car.trainData[,-7]
car.naiveBayes = naiveBayes(car.trainData[,1:6], car.trainData[,7])
car.naiveBayes = naiveBayes(car.trainData[,1:6], car.trainData[,7])
pred_cls=predict(car.naiveBayes, car.trainData, type="class")
calc_accu=function(target,pred){
k=0
l=length(target)
for(i in 1:l) k=k+(target[i]==pred[i])
return(k/l)
}
calc_accu(car.trainData[,7],pred_cls)
calc_accu(car.testData[,7],pred_cls)
pred_cls=predict(car.naiveBayes, car.trainData[,1:6], type="class")
calc_accu(car.testData[,7],pred_cls)
calc_accu(car.trainData[,7],pred_cls)
pred_cls=predict(car.naiveBayes, car.trainData[,7], type="class")
calc_accu(car.trainData[,7],pred_cls)
calc_accu(car.testData[,7],pred_cls)
iris.tr
iris
pred_cls=predict(car.naiveBayes, car.trainData, type="class")
calc_accu(car.testData[,7],pred_cls)
calc_accu(car.trainData[,7],pred_cls)
q()
data_raw <- read.csv("kospi_scale.csv")
data_raw
data_raw(10,)
data_raw[10,]
data_raw[:10,]
data_raw[1:10,]
data_raw <- read.csv("kospi_scale.csv")
data_raw[:10,]
data_raw[1:10,]
data_train <- data_raw
data_train[1:10,]
data_train_matrix <- as.matrix(scale(data_train))
data_train_matrix[1:10, ]
data_train_matrix <- as.matrix(data_train)
data_train_matrix[1:10, ]
require(kohonen)
som_grid <- somgrid(xdim=2, ydim=1, topo="hexagonal")
som_grid
system.time(som_model <- som(data_train_matrix, 
                             grid=som_grid, 
                             rlen=100, 
                             alpha=c(0.05,0.01), 
                             n.hood = "circular",
                             keep.data = TRUE ))
plot(som_model, type = "counts", main="Node Counts", palette.name=coolBlueHotRed)
coolBlueHotRed <- function(n, alpha = 1) {
  rainbow(n, end=4/6, alpha=alpha)[n:1]
}
plot(som_model, type = "counts", main="Node Counts", palette.name=coolBlueHotRed)
q()
